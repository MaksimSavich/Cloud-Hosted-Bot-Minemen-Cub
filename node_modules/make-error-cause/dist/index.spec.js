"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var test = require("blue-tape");
var util_1 = require("util");
var index_1 = require("./index");
test('make error cause', function (t) {
    var TestError = /** @class */ (function (_super) {
        __extends(TestError, _super);
        function TestError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TestError;
    }(index_1.BaseError));
    var SubTestError = /** @class */ (function (_super) {
        __extends(SubTestError, _super);
        function SubTestError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SubTestError;
    }(TestError));
    t.test('render the cause', function (t) {
        var cause = new Error('boom!');
        var testError = new TestError('test boom!', cause);
        var subTestError = new SubTestError('sub test boom!', testError);
        t.equal(index_1.fullStack(cause), cause.stack);
        t.ok(cause instanceof Error);
        t.equal(testError.cause, cause);
        t.equal(index_1.fullStack(testError), "" + testError.stack + index_1.SEPARATOR_TEXT + cause.stack);
        t.equal(util_1.inspect(testError), index_1.fullStack(testError));
        t.ok(testError instanceof Error);
        t.ok(testError instanceof index_1.BaseError);
        t.ok(testError instanceof TestError);
        t.equal(subTestError.cause, testError);
        t.equal(index_1.fullStack(subTestError), "" + subTestError.stack + index_1.SEPARATOR_TEXT + testError.stack + index_1.SEPARATOR_TEXT + cause.stack);
        t.equal(util_1.inspect(subTestError), index_1.fullStack(subTestError));
        t.ok(subTestError instanceof Error);
        t.ok(subTestError instanceof index_1.BaseError);
        t.ok(subTestError instanceof TestError);
        t.ok(subTestError instanceof SubTestError);
        t.end();
    });
});
//# sourceMappingURL=index.spec.js.map