const Discord = require('discord.js');

const affectedTextChannelClasses = [
  Discord.User,
  Discord.TextChannel,
  Discord.DMChannel,
  Discord.GroupDMChannel,
];

const affectedWebhookClasses = [
  Discord.Webhook,
  Discord.WebhookClient,
];

const webHookMethods = {
  sendMessage(content, options = {}) {
    return this.send(content, options);
  },

  sendFile(attachment, name, content, options = {}) {
    return this.send(content, Object.assign(options, {file: { attachment, name }}));
  },

  sendCode(lang, content, options = {}) {
    return this.send(`\`\`\`${lang}\n${content}\`\`\``, Object.assign(options, { code: lang }));
  },
};

const textChannelMethods = {
  sendMessage(content, options) {
    return this.send(content, options);
  },

  sendEmbed(embed, content, options) {
    if (!options && typeof content === 'object' && !(content instanceof Array)) {
      options = content;
      content = '';
    } else if (!options) {
      options = {};
    }
    return this.send(content, Object.assign(options, { embed }));
  },

  sendFile(attachment, name, content, options = {}) {
    return this.send({ files: [{ attachment, name }], content, options });
  },

  sendFiles(files, content, options = {}) {
    return this.send(content, Object.assign(options, { files }));
  },

  sendCode(lang, content, options = {}) {
    return this.send(content, Object.assign(options, { code: lang }));
  },

};

for (const structure of affectedWebhookClasses) {
  for (const methodName in webHookMethods) {
    structure.prototype[methodName] = webHookMethods[methodName];
  }
}

for (const structure of affectedTextChannelClasses) {
  for (const methodName in textChannelMethods) {
    structure.prototype[methodName] = textChannelMethods[methodName];
  }
}
